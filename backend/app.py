from flask import Flask, render_template, jsonify, redirect, request
import requests, json
from datetime import datetime
from flask_sqlalchemy import SQLAlchemy
# from flask_bcrypt import Bcrypt
# from flask_login import LoginManager, UserMixin,login_user, current_user, logout_user, login_required
from sqlalchemy.exc import IntegrityError
import random
from datetime import datetime,timedelta
from time import strftime
from flask_cors import CORS
import numpy as np
import pickle
import pandas as pd
from keras import backend as k

app = Flask(__name__)
app.config['SECRET_KEY'] = '9db80a7b38ecd1ba9ed4fda7fd38508a'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
CORS(app)
freeforexSupportedPairs = ["AUDUSD","EURGBP","EURUSD","GBPUSD","NZDUSD","USDAED","USDAFN","USDALL","USDAMD","USDANG","USDAOA","USDARS","USDATS","USDAUD","USDAWG","USDAZM","USDAZN","USDBAM","USDBBD","USDBDT","USDBEF","USDBGN","USDBHD","USDBIF","USDBMD","USDBND","USDBOB","USDBRL","USDBSD","USDBTN","USDBWP","USDBYN","USDBYR","USDBZD","USDCAD","USDCDF","USDCHF","USDCLP","USDCNH","USDCNY","USDCOP","USDCRC","USDCUC","USDCUP","USDCVE","USDCYP","USDCZK","USDDEM","USDDJF","USDDKK","USDDOP","USDDZD","USDEEK","USDEGP","USDERN","USDESP","USDETB","USDEUR","USDFIM","USDFJD","USDFKP","USDFRF","USDGBP","USDGEL","USDGGP","USDGHC","USDGHS","USDGIP","USDGMD","USDGNF","USDGRD","USDGTQ","USDGYD","USDHKD","USDHNL","USDHRK","USDHTG","USDHUF","USDIDR","USDIEP","USDILS","USDIMP","USDINR","USDIQD","USDIRR","USDISK","USDITL","USDJEP","USDJMD","USDJOD","USDJPY","USDKES","USDKGS","USDKHR","USDKMF","USDKPW","USDKRW","USDKWD","USDKYD","USDKZT","USDLAK","USDLBP","USDLKR","USDLRD","USDLSL","USDLTL","USDLUF","USDLVL","USDLYD","USDMAD","USDMDL","USDMGA","USDMGF","USDMKD","USDMMK","USDMNT","USDMOP","USDMRO","USDMRU","USDMTL","USDMUR","USDMVR","USDMWK","USDMXN","USDMYR","USDMZM","USDMZN","USDNAD","USDNGN","USDNIO","USDNLG","USDNOK","USDNPR","USDNZD","USDOMR","USDPAB","USDPEN","USDPGK","USDPHP","USDPKR","USDPLN","USDPTE","USDPYG","USDQAR","USDROL","USDRON","USDRSD","USDRUB","USDRWF","USDSAR","USDSBD","USDSCR","USDSDD","USDSDG","USDSEK","USDSGD","USDSHP","USDSIT","USDSKK","USDSLL","USDSOS","USDSPL","USDSRD","USDSRG","USDSTD","USDSTN","USDSVC","USDSYP","USDSZL","USDTHB","USDTJS","USDTMM","USDTMT","USDTND","USDTOP","USDTRL","USDTRY","USDTTD","USDTVD","USDTWD","USDTZS","USDUAH","USDUGX","USDUSD","USDUYU","USDUZS","USDVAL","USDVEB","USDVEF","USDVES","USDVND","USDVUV","USDWST","USDXAF","USDXAG","USDXAU","USDXBT","USDXCD","USDXDR","USDXOF","USDXPD","USDXPF","USDXPT","USDYER","USDZAR","USDZMK","USDZMW","USDZWD"]

db = SQLAlchemy(app)
# bcrypt = Bcrypt(app)
# login_manager = LoginManager(app)
# login_manager.login_view = 'login'
# login_manager.login_message_category = 'info'

freeforexMax = freeforexMin = exchrateMax = exchrateMin = {}


# @login_manager.user_loader
# def load_user(user_id):
#     return User.query.get(int(user_id))

# class User(db.Model, UserMixin):
#     id = db.Column(db.Integer, primary_key = True)
#     name = db.Column(db.String(20), unique = True, nullable = False)
#     email = db.Column(db.String(120), unique = True, nullable = False)
#     fx_name = db.Column(db.String(20), unique = True, nullable = False)
#     password = db.Column(db.String(60), nullable = False)

#     def __repr__(self):
#         return f"User('{self.name}', '{self.email}', '{self.fx_name}')"



# @app.route('/register',methods=['POST'])
# def func_name():
#     name = request.form['username']
#     email = request.form['email']
#     fx_name = request.form['fxprovider']
#     password = request.form['passwordOne']
#     confirm_password = request.form['passwordTwo']
#     if password != confirm_password:
#         return redirect("http://localhost:3000/Register")
#     hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')
#     try:
#         user = User(name=name,email=email,fx_name=fx_name, password=hashed_password)
#         db.session.add(user)    
#         db.session.commit()
#     except IntegrityError:
#         print(IntegrityError)
#         db.session.rollback()
#         return redirect("http://localhost:3000/Register")

#     return redirect("http://localhost:3000/Login")

# @app.route('/login',methods=['POST'])
# def login():
#     email = request.form['email']
#     password = request.form['password']
    

#     user = User.query.filter_by(email = email).first()
#     if not user:
#         return redirect("http://localhost:3000")
#     elif bcrypt.check_password_hash(user.password, password):
#         login_user(user)
#         return redirect("http://localhost:3000/App")
#     else:
#         return redirect("http://localhost:3000")
#     return redirect("http://localhost:3000/App")

# @app.route('/users', methods=['GET'])
# def get_users():
#     users = User.query.with_entities(User.fx_name).all()
#     return jsonify({"users":users})

dictionary={'TRYCAD': 0.1648096466, 'TRYHKD': 0.982498562, 'TRYISK': 17.1818743476, 'TRYPHP': 6.0990860478, 'TRYDKK': 0.7927309913, 'TRYHUF': 38.4733377362, 'TRYCZK': 2.7842519014, 'TRYGBP': 0.0949413068, 'TRYRON': 0.5192164298, 'TRYSEK': 1.0819148256, 'TRYIDR': 1794.1455932167, 'TRYINR': 9.3595411065, 'TRYBRL': 0.6763458957, 'TRYRUB': 9.5991925691, 'TRYHRK': 0.8047891945, 'TRYJPY': 13.2128933296, 'TRYTHB': 3.8408359786, 'TRYCHF': 0.1151814057, 'TRYEUR': 0.1065212297, 'TRYMYR': 0.515594708, 'TRYBGN': 0.208334221, 'TRYTRY': 1.0, 'TRYCNY': 0.8335712307, 'TRYNOK': 1.1259826583, 'TRYNZD': 0.1810860905, 'TRYZAR': 1.9290781653, 'TRYUSD': 0.1267602633, 'TRYMXN': 2.5403076333, 'TRYSGD': 0.1696883189, 'TRYAUD': 0.1721702635, 'TRYILS': 0.4211636379, 'TRYKRW': 140.4205458148, 'TRYPLN': 0.4766718507, 'AUDCAD': 0.9572480356, 'AUDHKD': 5.7065520015, 'AUDISK': 99.7958299821, 'AUDPHP': 35.424735507, 'AUDDKK': 4.6043432531, 'AUDHUF': 223.4609911526, 'AUDCZK': 16.1715028151, 'AUDGBP': 0.5514384706, 'AUDRON': 3.0157149044, 'AUDSEK': 6.283981934, 'AUDIDR': 10420.7634721277, 'AUDINR': 54.3621233682, 'AUDBRL': 3.9283548846, 'AUDRUB': 55.7540679329, 'AUDHRK': 4.6743797562, 'AUDJPY': 76.7431788653, 'AUDTHB': 22.3083585968, 'AUDCHF': 0.6689970921, 'AUDEUR': 0.6186970241, 'AUDMYR': 2.9946792056, 'AUDBGN': 1.2100476397, 'AUDTRY': 5.8082039225, 'AUDCNY': 4.8415516921, 'AUDNOK': 6.5399368929, 'AUDNZD': 1.0517849409, 'AUDZAR': 11.2044793665, 'AUDUSD': 0.7362494586, 'AUDMXN': 14.7546247603, 'AUDSGD': 0.9855843593, 'AUDAUD': 1.0, 'AUDILS': 2.4462042938, 'AUDKRW': 815.5911650065, 'AUDPLN': 2.768607313, 'CNYCAD': 0.1977151328, 'CNYHKD': 1.1786617936, 'CNYISK': 20.6123648631, 'CNYPHP': 7.3168144759, 'CNYDKK': 0.9510056994, 'CNYHUF': 46.1548291461, 'CNYCZK': 3.3401487464, 'CNYGBP': 0.1138970532, 'CNYRON': 0.6228818974, 'CNYSEK': 1.2979272625, 'CNYIDR': 2152.3602627342, 'CNYINR': 11.2282439236, 'CNYBRL': 0.8113834437, 'CNYRUB': 11.5157436042, 'CNYHRK': 0.9654714136, 'CNYJPY': 15.8509469165, 'CNYTHB': 4.6076877859, 'CNYCHF': 0.1381782401, 'CNYEUR': 0.1277889948, 'CNYMYR': 0.6185370716, 'CNYBGN': 0.2499297161, 'CNYTRY': 1.1996575255, 'CNYCNY': 1.0, 'CNYNOK': 1.3507935697, 'CNYNZD': 0.2172412912, 'CNYZAR': 2.3142331382, 'CNYUSD': 0.1520689038, 'CNYMXN': 3.0474991694, 'CNYSGD': 0.2035678687, 'CNYAUD': 0.2065453523, 'CNYILS': 0.5052521277, 'CNYKRW': 168.4565645207, 'CNYPLN': 0.5718429729, 'MYRCAD': 0.3196496085, 'MYRHKD': 1.9055637047, 'MYRISK': 33.3243807202, 'MYRPHP': 11.8292254612, 'MYRDKK': 1.5375080057, 'MYRHUF': 74.6193417763, 'MYRCZK': 5.4000785075, 'MYRGBP': 0.1841394128, 'MYRRON': 1.007024358, 'MYRSEK': 2.0983823317, 'MYRIDR': 3479.7595190381, 'MYRINR': 18.1529037456, 'MYRBRL': 1.3117781956, 'MYRRUB': 18.6177096461, 'MYRHRK': 1.5608949858, 'MYRJPY': 25.6265107535, 'MYRTHB': 7.449331653, 'MYRCHF': 0.2233952441, 'MYREUR': 0.2065987645, 'MYRMYR': 1.0, 'MYRBGN': 0.4040658637, 'MYRTRY': 1.9395078817, 'MYRCNY': 1.616717972, 'MYRNOK': 2.1838522406, 'MYRNZD': 0.3512178997, 'MYRZAR': 3.7414623061, 'MYRUSD': 0.2458525298, 'MYRMXN': 4.9269466769, 'MYRSGD': 0.3291118319, 'MYRAUD': 0.3339255831, 'MYRILS': 0.8168501952, 'MYRKRW': 272.3467553664, 'MYRPLN': 0.9245088114, 'USDCAD': 1.3001680672, 'USDHKD': 7.7508403361, 'USDISK': 135.5462184874, 'USDPHP': 48.1151260504, 'USDDKK': 6.2537815126, 'USDHUF': 303.512605042, 'USDCZK': 21.9647058824, 'USDGBP': 0.7489831933, 'USDRON': 4.0960504202, 'USDSEK': 8.5351260504, 'USDIDR': 14153.8487394958, 'USDINR': 73.8365546218, 'USDBRL': 5.3356302521, 'USDRUB': 75.7271428571, 'USDHRK': 6.348907563, 'USDJPY': 104.2352941176, 'USDTHB': 30.3, 'USDCHF': 0.9086554622, 'USDEUR': 0.8403361345, 'USDMYR': 4.0674789916, 'USDBGN': 1.6435294118, 'USDTRY': 7.888907563, 'USDCNY': 6.5759663866, 'USDNOK': 8.8827731092, 'USDNZD': 1.4285714286, 'USDZAR': 15.2183193277, 'USDUSD': 1.0, 'USDMXN': 20.0402521008, 'USDSGD': 1.3386554622, 'USDAUD': 1.3582352941, 'USDILS': 3.3225210084, 'USDKRW': 1107.7647058824, 'USDPLN': 3.7604201681, 'MXNCAD': 0.0648778299, 'MXNHKD': 0.3867636144, 'MXNISK': 6.7636982711, 'MXNPHP': 2.4009241904, 'MXNDKK': 0.31206102, 'MXNHUF': 15.1451490488, 'MXNCZK': 1.0960294198, 'MXNGBP': 0.0373739407, 'MXNRON': 0.2043911623, 'MXNSEK': 0.4258991358, 'MXNIDR': 706.2709924144, 'MXNINR': 3.684412464, 'MXNBRL': 0.2662456652, 'MXNRUB': 3.7787520075, 'MXNHRK': 0.3168077692, 'MXNJPY': 5.2012965502, 'MXNTHB': 1.5119570277, 'MXNCHF': 0.0453415185, 'MXNEUR': 0.0419324133, 'MXNMYR': 0.2029654603, 'MXNBGN': 0.082011414, 'MXNTRY': 0.3936531099, 'MXNCNY': 0.3281379073, 'MXNNOK': 0.4432465752, 'MXNNZD': 0.0712851027, 'MXNZAR': 0.759387619, 'MXNUSD': 0.0498995719, 'MXNMXN': 1.0, 'MXNSGD': 0.0667983344, 'MXNAUD': 0.0677753597, 'MXNILS': 0.1657923758, 'MXNKRW': 55.2769845563, 'MXNPLN': 0.1876433564, 'RONCAD': 0.3174199372, 'RONHKD': 1.8922717108, 'RONISK': 33.0919311491, 'RONPHP': 11.7467123484, 'RONDKK': 1.526783333, 'RONHUF': 74.0988449624, 'RONCZK': 5.3624110129, 'RONGBP': 0.182854974, 'RONRON': 1.0, 'RONSEK': 2.0837453583, 'RONIDR': 3455.4869417147, 'RONINR': 18.0262806967, 'RONBRL': 1.3026280697, 'RONRUB': 18.4878444084, 'RONHRK': 1.5500071805, 'RONJPY': 25.4477566009, 'RONTHB': 7.3973698788, 'RONCHF': 0.2218369817, 'RONEUR': 0.2051576637, 'RONMYR': 0.9930246394, 'RONBGN': 0.4012473586, 'RONTRY': 1.9259791149, 'RONCNY': 1.6054407812, 'RONNOK': 2.1686190838, 'RONNZD': 0.3487680282, 'RONZAR': 3.7153642574, 'RONUSD': 0.2441376198, 'RONMXN': 4.8925794473, 'RONSGD': 0.3268161582, 'RONAUD': 0.3315963318, 'RONILS': 0.8111523706, 'RONKRW': 270.4470385491, 'RONPLN': 0.9180600291, 'THBCAD': 0.0429098372, 'THBHKD': 0.2558033114, 'THBISK': 4.4734725573, 'THBPHP': 1.5879579555, 'THBDKK': 0.2063954295, 'THBHUF': 10.0169176582, 'THBCZK': 0.7249077849, 'THBGBP': 0.0247189173, 'THBRON': 0.1351831822, 'THBSEK': 0.2816873284, 'THBIDR': 467.1237207754, 'THBINR': 2.4368499875, 'THBBRL': 0.1760934077, 'THBRUB': 2.4992456388, 'THBHRK': 0.2095349031, 'THBJPY': 3.4401087168, 'THBTHB': 1.0, 'THBCHF': 0.0299886291, 'THBEUR': 0.0277338658, 'THBMYR': 0.1342402307, 'THBBGN': 0.0542418948, 'THBTRY': 0.2603599856, 'THBCNY': 0.2170285936, 'THBNOK': 0.2931608287, 'THBNZD': 0.0471475719, 'THBZAR': 0.5022547633, 'THBUSD': 0.0330033003, 'THBMXN': 0.6613944588, 'THBSGD': 0.0441800483, 'THBAUD': 0.0448262473, 'THBILS': 0.1096541587, 'THBKRW': 36.5598912832, 'THBPLN': 0.1241062762, 'PLNCAD': 0.345750743, 'PLNHKD': 2.061163378, 'PLNISK': 36.0454982234, 'PLNPHP': 12.7951462603, 'PLNDKK': 1.663053923, 'PLNHUF': 80.7124181546, 'PLNCZK': 5.8410243804, 'PLNGBP': 0.1991754006, 'PLNRON': 1.0892533911, 'PLNSEK': 2.2697266978, 'PLNIDR': 3763.9008692932, 'PLNINR': 19.6351873785, 'PLNBRL': 1.4188920423, 'PLNRUB': 20.1379472167, 'PLNHRK': 1.6883505777, 'PLNJPY': 27.7190551744, 'PLNTHB': 8.0576102259, 'PLNCHF': 0.2416366846, 'PLNEUR': 0.2234686809, 'PLNMYR': 1.081655456, 'PLNBGN': 0.437060046, 'PLNTRY': 2.0978792822, 'PLNCNY': 1.7487318152, 'PLNNOK': 2.3621756911, 'PLNNZD': 0.3798967575, 'PLNZAR': 4.0469731167, 'PLNUSD': 0.2659277302, 'PLNMXN': 5.3292587544, 'PLNSGD': 0.3559856086, 'PLNAUD': 0.3611924289, 'PLNILS': 0.8835504704, 'PLNKRW': 294.5853538627, 'PLNPLN': 1.0, 'BGNCAD': 0.7910829328, 'BGNHKD': 4.7159730034, 'BGNISK': 82.4726454648, 'BGNPHP': 29.2754882912, 'BGNDKK': 3.8050925453, 'BGNHUF': 184.6712342775, 'BGNCZK': 13.3643521832, 'BGNGBP': 0.4557163309, 'BGNRON': 2.4922282442, 'BGNSEK': 5.1931690357, 'BGNIDR': 8611.8621535944, 'BGNINR': 44.9256058902, 'BGNBRL': 3.2464464669, 'BGNRUB': 46.075928009, 'BGNHRK': 3.862971674, 'BGNJPY': 63.4216177523, 'BGNTHB': 18.4359341446, 'BGNCHF': 0.5528683915, 'BGNEUR': 0.5112997239, 'BGNMYR': 2.4748440536, 'BGNBGN': 1.0, 'BGNTRY': 4.799979548, 'BGNCNY': 4.0011248594, 'BGNNOK': 5.4046937315, 'BGNNZD': 0.8692095306, 'BGNZAR': 9.2595357399, 'BGNUSD': 0.6084466714, 'BGNMXN': 12.1934246856, 'BGNSGD': 0.8145004602, 'BGNAUD': 0.8264137437, 'BGNILS': 2.0215768483, 'BGNKRW': 674.0157480315, 'BGNPLN': 2.2880151345, 'CADCAD': 1.0, 'CADHKD': 5.9614141675, 'CADISK': 104.2528438469, 'CADPHP': 37.0068510858, 'CADDKK': 4.8099793175, 'CADHUF': 233.4410548087, 'CADCZK': 16.8937435367, 'CADGBP': 0.5760664426, 'CADRON': 3.1504007239, 'CADSEK': 6.5646328852, 'CADIDR': 10886.1685625646, 'CADINR': 56.7900077559, 'CADBRL': 4.1038004137, 'CADRUB': 58.2441184074, 'CADHRK': 4.8831437435, 'CADJPY': 80.170630817, 'CADTHB': 23.3046794209, 'CADCHF': 0.6988753878, 'CADEUR': 0.6463288521, 'CADMYR': 3.1284255429, 'CADBGN': 1.264089969, 'CADTRY': 6.0676059979, 'CADCNY': 5.0577817994, 'CADNOK': 6.8320191313, 'CADNZD': 1.0987590486, 'CADZAR': 11.7048862461, 'CADUSD': 0.769131334, 'CADMXN': 15.4135858325, 'CADSGD': 1.0296018614, 'CADAUD': 1.0446613237, 'CADILS': 2.5554550155, 'CADKRW': 852.0165460186, 'CADPLN': 2.8922569804, 'ISKCAD': 0.0095920645, 'ISKHKD': 0.0571822691, 'ISKISK': 1.0, 'ISKPHP': 0.3549721017, 'ISKDKK': 0.0461376317, 'ISKHUF': 2.2391816491, 'ISKCZK': 0.1620458772, 'ISKGBP': 0.0055256665, 'ISKRON': 0.0302188469, 'ISKSEK': 0.0629683819, 'ISKIDR': 104.4208307502, 'ISKINR': 0.544733416, 'ISKBRL': 0.0393639182, 'ISKRUB': 0.5586813391, 'ISKHRK': 0.0468394296, 'ISKJPY': 0.7690018599, 'ISKTHB': 0.2235399876, 'ISKCHF': 0.0067036578, 'ISKEUR': 0.006199628, 'ISKMYR': 0.0300080595, 'ISKBGN': 0.0121252325, 'ISKTRY': 0.0582008679, 'ISKCNY': 0.0485145691, 'ISKNOK': 0.065533168, 'ISKNZD': 0.0105393676, 'ISKZAR': 0.1122740236, 'ISKUSD': 0.0073775573, 'ISKMXN': 0.1478481091, 'ISKSGD': 0.0098760074, 'ISKAUD': 0.0100204588, 'ISKILS': 0.0245120893, 'ISKKRW': 8.1725976441, 'ISKPLN': 0.0277427154, 'SEKCAD': 0.152331443, 'SEKHKD': 0.9081108223, 'SEKISK': 15.8809861374, 'SEKPHP': 5.6373070258, 'SEKDKK': 0.7327110901, 'SEKHUF': 35.5604127284, 'SEKCZK': 2.5734483302, 'SEKGBP': 0.0877530325, 'SEKRON': 0.4799050882, 'SEKSEK': 1.0, 'SEKIDR': 1658.3057655955, 'SEKINR': 8.650903828, 'SEKBRL': 0.6251378387, 'SEKRUB': 8.8724106018, 'SEKHRK': 0.7438563327, 'SEKJPY': 12.2125078765, 'SEKTHB': 3.5500354442, 'SEKCHF': 0.1064606963, 'SEKEUR': 0.0984562067, 'SEKMYR': 0.4765575772, 'SEKBGN': 0.192560649,
 'SEKTRY': 0.9242871771, 'SEKCNY': 0.7704591997, 'SEKNOK': 1.0407313327, 'SEKNZD': 0.1673755514, 'SEKZAR': 1.7830222117, 'SEKUSD': 0.1171628859, 'SEKMXN': 2.3479737713, 'SEKSGD': 0.1568407372, 'SEKAUD': 0.1591347669, 'SEKILS': 0.38927615, 'SEKKRW': 129.7889098929, 'SEKPLN': 0.4405816793, 'NZDCAD': 0.9101176471, 'NZDHKD': 5.4255882353, 'NZDISK': 94.8823529412, 'NZDPHP': 33.6805882353, 'NZDDKK': 4.3776470588, 'NZDHUF': 212.4588235294, 'NZDCZK': 15.3752941176, 'NZDGBP': 0.5242882353, 'NZDRON': 2.8672352941, 'NZDSEK': 5.9745882353, 'NZDIDR': 9907.6941176471, 'NZDINR': 51.6855882353, 'NZDBRL': 3.7349411765, 'NZDRUB': 53.009, 'NZDHRK': 4.4442352941, 'NZDJPY': 72.9647058824, 'NZDTHB': 21.21, 'NZDCHF': 0.6360588235, 'NZDEUR': 0.5882352941, 'NZDMYR': 2.8472352941, 'NZDBGN': 1.1504705882, 'NZDTRY': 5.5222352941, 'NZDCNY': 4.6031764706, 'NZDNOK': 6.2179411765, 'NZDNZD': 1.0, 'NZDZAR': 10.6528235294, 'NZDUSD': 0.7, 'NZDMXN': 14.0281764706, 'NZDSGD': 0.9370588235, 'NZDAUD': 0.9507647059, 'NZDILS': 2.3257647059, 'NZDKRW': 775.4352941176, 'NZDPLN': 2.6322941176, 'ILSCAD': 0.391319743, 'ILSHKD': 2.3328190601, 'ILSISK': 40.7961960645, 'ILSPHP': 14.4815114573, 'ILSDKK': 1.8822398705, 'ILSHUF': 91.3500935809, 'ILSCZK': 6.6108553796, 'ILSGBP': 0.2254261723, 'ILSRON': 1.2328140017, 'ILSSEK': 2.5688704537, 'ILSIDR': 4259.972684506, 'ILSINR': 22.2230512418, 'ILSBRL': 1.6058981233, 'ILSRUB': 22.7920734483, 'ILSHRK': 1.9108705549, 'ILSJPY': 31.37235065, 'ILSTHB': 9.1195811624, 'ILSCHF': 0.2734837372, 'ILSEUR': 0.2529212403, 'ILSMYR': 1.2242146795, 'ILSBGN': 0.4946633618, 'ILSTRY': 2.3743740199, 'ILSCNY': 1.979209874, 'ILSNOK': 2.6735039709, 'ILSNZD': 0.4299661086, 'ILSZAR': 4.5803530781, 'ILSUSD': 0.300976276, 'ILSMXN': 6.0316404472, 'ILSSGD': 0.4029035358, 'ILSAUD': 0.4087966007, 'ILSILS': 1.0, 'ILSKRW': 333.410895847, 'ILSPLN': 1.1317972583, 'BRLCAD': 0.2436765679, 'BRLHKD': 1.452656944, 'BRLISK': 25.4039751788, 'BRLPHP': 9.0177024601, 'BRLDKK': 1.1720792516, 'BRLHUF': 56.8841150345, 'BRLCZK': 4.1166094434, 'BRLGBP': 0.1403738936, 'BRLRON': 0.7676788358, 'BRLSEK': 1.5996472108, 'BRLIDR': 2652.7041925221, 'BRLINR': 13.838394179, 'BRLBRL': 1.0, 'BRLRUB': 14.1927268718, 'BRLHRK': 1.1899077078, 'BRLJPY': 19.535704161, 'BRLTHB': 5.6788042965, 'BRLCHF': 0.1702995559, 'BRLEUR': 0.1574951964, 'BRLMYR': 0.7623239991, 'BRLBGN': 0.3080291051, 'BRLTRY': 1.4785334047, 'BRLCNY': 1.2324629099, 'BRLNOK': 1.6648029735, 'BRLNZD': 0.2677418339, 'BRLZAR': 2.8522065077, 'BRLUSD': 0.1874192837, 'BRLMXN': 3.7559296941, 'BRLSGD': 0.2508898479, 'BRLAUD': 0.2545594859, 'BRLILS': 0.6227045075, 'BRLKRW': 207.6164676977, 'BRLPLN': 0.7047752544, 'NOKCAD': 0.1463696135, 'NOKHKD': 0.8725698879, 'NOKISK': 15.2594484651, 'NOKPHP': 5.416678492, 'NOKDKK': 0.7040348139, 'NOKHUF': 34.1686769784, 'NOKCZK': 2.4727307128, 'NOKGBP': 0.0843186226, 'NOKRON': 0.4611229365, 'NOKSEK': 0.9608627785, 'NOKIDR': 1593.4042855116, 'NOKINR': 8.3123314886, 'NOKBRL': 0.6006716806, 'NOKRUB': 8.5251691027, 'NOKHRK': 0.7147438626, 'NOKJPY': 11.7345442505, 'NOKTHB': 3.4110969207, 'NOKCHF': 0.1022941204, 'NOKEUR': 0.0946029043, 'NOKMYR': 0.4579064377, 'NOKBGN': 0.1850243602, 'NOKTRY': 0.8881131451, 'NOKCNY': 0.7403055674, 'NOKNOK': 1.0, 'NOKNZD': 0.1608249373, 'NOKZAR': 1.7132396765, 'NOKUSD': 0.1125774561, 'NOKMXN': 2.2560806017, 'NOKSGD': 0.1507024266, 'NOKAUD': 0.1529066742, 'NOKILS': 0.3740409631, 'NOKKRW': 124.7093325765, 'NOKPLN': 0.4233385365, 'HRKCAD': 0.2047861076, 'HRKHKD': 1.220814803, 'HRKISK': 21.3495340957, 'HRKPHP': 7.5784889877, 'HRKDKK': 0.985016942, 'HRKHUF': 47.805484964, 'HRKCZK': 3.4596039814, 'HRKGBP': 0.1179704045, 'HRKRON': 0.6451583016, 'HRKSEK': 1.3443456163, 'HRKIDR': 2229.3360864041, 'HRKINR': 11.6298046379, 'HRKBRL': 0.840401313, 'HRKRUB': 11.9275862982, 'HRKHRK': 1.0, 'HRKJPY': 16.4178314274, 'HRKTHB': 4.772474587, 'HRKCHF': 0.1431199704, 'HRKEUR': 0.1323591698, 'HRKMYR': 0.6406580898, 'HRKBGN': 0.2588680644, 'HRKTRY': 1.2425614147, 'HRKCNY': 1.0357634477, 'HRKNOK': 1.3991026048, 'HRKNZD': 0.2250105887, 'HRKZAR': 2.396998094, 'HRKUSD': 0.1575074121, 'HRKMXN': 3.1564882465, 'HRKSGD': 0.2108481576, 'HRKAUD': 0.2139321262, 'HRKILS': 0.5233216857, 'HRKKRW': 174.4811520542, 'HRKPLN': 0.5922940491, 'CZKCAD': 0.0591935114, 'CZKHKD': 0.3528770373, 'CZKISK': 6.1710918969, 'CZKPHP': 2.1905654602, 'CZKDKK': 0.2847195654, 'CZKHUF': 13.8181957304, 'CZKCZK': 1.0, 'CZKGBP': 0.0340993955, 'CZKRON': 0.186483281, 'CZKSEK': 0.3885836713, 'CZKIDR': 644.3905425052, 'CZKINR': 3.3615999694, 'CZKBRL': 0.2429183564, 'CZKRUB': 3.4476738848, 'CZKHRK': 0.2890504247, 'CZKJPY': 4.7455811462, 'CZKTHB': 1.3794858061, 'CZKCHF': 0.0413688882, 'CZKEUR': 0.0382584743, 'CZKMYR': 0.1851824929, 'CZKBGN': 0.0748259239, 'CZKTRY': 0.3591629046, 'CZKCNY': 0.2993878644, 'CZKNOK': 0.4044112021, 'CZKNZD': 0.0650394062, 'CZKZAR': 0.692853317, 'CZKUSD': 0.0455275844, 'CZKMXN': 0.9123842681, 'CZKSGD': 0.0609457495, 'CZKAUD': 0.0618371719, 'CZKILS': 0.1512663555, 'CZKKRW': 50.433851098, 'CZKPLN': 0.1712028464, 'JPYCAD': 0.0124733957, 'JPYHKD': 0.0743590777, 'JPYISK': 1.3003869719, 'JPYPHP': 0.4616010964, 'JPYDKK': 0.0599967752, 'JPYHUF': 2.9118026443, 'JPYCZK': 0.2107223476, 'JPYGBP': 0.0071855047, 'JPYRON': 0.0392961948, 'JPYSEK': 0.0818832635, 'JPYIDR': 135.7874879071, 'JPYINR': 0.7083642373, 'JPYBRL': 0.0511883263, 'JPYRUB': 0.7265019349, 'JPYHRK': 0.0609093841, 'JPYJPY': 1.0, 'JPYTHB': 0.2906884876, 'JPYCHF': 0.0087173492, 'JPYEUR': 0.0080619155, 'JPYMYR': 0.0390220896, 'JPYBGN': 0.0157674944, 'JPYTRY': 0.0756836504, 'JPYCNY': 0.0630877136, 'JPYNOK': 0.0852184779, 'JPYNZD': 0.0137052564, 'JPYZAR': 0.1459996775, 'JPYUSD': 0.0095936795, 'JPYMXN': 0.1922597549, 'JPYSGD': 0.0128426314, 'JPYAUD': 0.013030474, 'JPYILS': 0.0318752015, 'JPYKRW': 10.6275395034, 'JPYPLN': 0.0360762657, 'DKKCAD': 0.2079011019, 'DKKHKD': 1.239384574, 'DKKISK': 21.6742811072, 'DKKPHP': 7.6937651169, 'DKKDKK': 1.0, 'DKKHUF': 48.5326525128, 'DKKCZK': 3.5122278957, 'DKKGBP': 0.1197648482, 'DKKRON': 0.6549717818, 'DKKSEK': 1.3647944101, 'DKKIDR': 2263.2464391293, 'DKKINR': 11.8067051868, 'DKKBRL': 0.8531846278, 'DKKRUB': 12.1090163934, 'DKKHRK': 1.0152109648, 'DKKJPY': 16.6675624832, 'DKKTHB': 4.84506853, 'DKKCHF': 0.1452969632, 'DKKEUR': 0.1343724805, 'DKKMYR': 0.6504031174, 'DKKBGN': 0.2628056974, 'DKKTRY': 1.2614619726, 'DKKCNY': 1.051518409, 'DKKNOK': 1.4203843053, 'DKKNZD': 0.2284332169, 'DKKZAR': 2.4334587476, 'DKKUSD': 0.1599032518, 'DKKMXN': 3.2045014781, 'DKKSGD': 0.2140553615, 'DKKAUD': 0.2171862403, 'DKKILS': 0.5312819135, 'DKKKRW': 177.1351787154, 'DKKPLN': 0.6013034131, 'GBPCAD': 1.7359108708, 'GBPHKD': 10.3484836585, 'GBPISK': 180.9736449416, 'GBPPHP': 64.2405950925, 'GBPDKK': 8.3496953853, 'GBPHUF': 405.2328647242, 'GBPCZK': 29.3260330532, 'GBPGBP': 1.0, 'GBPRON': 5.4688148638, 'GBPSEK': 11.395617588, 'GBPIDR': 18897.4183486856, 'GBPINR': 98.5823918141, 'GBPBRL': 7.1238317495, 'GBPRUB': 101.1065983013, 'GBPHRK': 8.4767023079, 'GBPJPY': 139.1690695509, 'GBPTHB': 40.4548463463, 'GBPCHF': 1.213185383, 'GBPEUR': 1.1219692805, 'GBPMYR': 5.4306679083, 'GBPBGN': 2.1943475188, 'GBPTRY': 10.5328232113, 'GBPCNY': 8.7798584075, 'GBPNOK': 11.8597762793, 'GBPNZD': 1.9073477768, 'GBPZAR': 20.3186392757, 'GBPUSD': 1.3351434438, 'GBPMXN': 26.756611204, 'GBPSGD': 1.7872970638, 'GBPAUD': 1.813438948, 'GBPILS': 4.4360421412, 'GBPKRW': 1479.0247843014, 'GBPPLN': 5.0207003332, 'ZARCAD': 0.0854344057, 'ZARHKD': 0.5093098764, 'ZARISK': 8.9067797546, 'ZARPHP': 3.1616583286, 'ZARDKK': 0.4109377243, 'ZARHUF': 19.9438977791, 'ZARCZK': 1.4433069388, 'ZARGBP': 0.0492158942, 'ZARRON': 0.2691526135, 'ZARSEK': 0.5608455091, 'ZARIDR': 930.0533412848, 'ZARINR': 4.8518205612, 'ZARBRL': 0.3506057494, 'ZARRUB': 4.9760516405, 'ZARHRK': 0.4171884836, 'ZARJPY': 6.8493301969, 'ZARTHB': 1.9910214359, 'ZARCHF': 0.0597080034, 'ZAREUR': 0.0552187214, 'ZARMYR': 0.267275177, 'ZARBGN': 0.1079967752, 'ZARTRY': 0.5183823123, 'ZARCNY': 0.4321085821, 'ZARNOK': 0.5836894941, 'ZARNZD': 0.0938718263, 'ZARZAR': 1.0, 'ZARUSD': 0.0657102784, 'ZARMXN': 1.316850545, 'ZARSGD': 0.0879634231, 'ZARAUD': 0.0892500193, 'ZARILS': 0.2183237805, 'ZARKRW': 72.7915272394, 'ZARPLN': 0.2470982562, 'SGDCAD': 0.9712492153, 'SGDHKD': 5.7900188324, 'SGDISK': 101.2554927809, 'SGDPHP': 35.9428750785, 'SGDDKK': 4.6716886378, 'SGDHUF': 226.7294413057, 'SGDCZK': 16.4080351538, 'SGDGBP': 0.5595040804, 'SGDRON': 3.059824231, 'SGDSEK': 6.3758945386, 'SGDIDR': 10573.1826741996, 'SGDINR': 55.1572504708, 'SGDBRL': 3.9858129316, 'SGDRUB': 56.5695543001, 'SGDHRK': 4.7427495292, 'SGDJPY': 77.8656622724, 'SGDTHB': 22.6346516008, 'SGDCHF': 0.678782172, 'SGDEUR': 0.6277463905, 'SGDMYR': 3.0384808537, 'SGDBGN': 1.2277463905, 'SGDTRY': 5.8931575643, 'SGDCNY': 4.9123666039, 'SGDNOK': 6.6355932203, 'SGDNZD': 1.0671688638, 'SGDZAR': 11.3683615819, 'SGDUSD': 0.7470182046, 'SGDMXN': 14.970433145, 'SGDSGD': 1.0, 'SGDAUD': 1.0146264909, 'SGDILS': 2.4819836786, 'SGDKRW': 827.5204017577, 'SGDPLN': 2.8091023227, 'HUFCAD': 0.0042837366, 'HUFHKD': 0.0255371283, 'HUFISK': 0.4465917271, 'HUFPHP': 0.158527604, 'HUFDKK': 0.0206046846, 'HUFHUF': 1.0, 'HUFCZK': 0.0723683482, 'HUFGBP': 0.0024677169, 'HUFRON': 0.013495487, 'HUFSEK': 0.0281211584, 'HUFIDR': 46.6334791517, 'HUFINR': 0.2432734371, 'HUFBRL': 0.0175796002, 'HUFRUB': 0.2495024641, 'HUFHRK': 0.0209181018, 'HUFJPY': 0.3434298688, 'HUFTHB': 0.0998311091, 'HUFCHF': 0.0029937981, 'HUFEUR': 0.0027687026, 'HUFMYR': 0.0134013511, 'HUFBGN': 0.0054150285, 'HUFTRY': 0.0259920261, 'HUFCNY': 0.0216662052, 'HUFNOK': 0.0292665707, 'HUFNZD': 0.0047067944, 'HUFZAR': 0.0501406501, 'HUFUSD': 0.0032947561, 'HUFMXN': 0.0660277424, 'HUFSGD': 0.0044105432, 'HUFAUD': 0.004475054, 'HUFILS': 0.0109468963, 'HUFKRW': 3.6498144969, 'HUFPLN': 0.0123896672, 'RUBCAD': 0.0171691156, 'RUBHKD': 0.1023522088, 'RUBISK': 1.7899291241, 'RUBPHP': 0.635374903, 'RUBDKK': 0.0825830908, 'RUBHUF': 4.007976448, 'RUBCZK': 0.2900506351, 'RUBGBP': 0.0098905513, 'RUBRON': 0.0540895941, 'RUBSEK': 0.1127089407, 
 'RUBIDR': 186.9058861259, 'RUBINR': 0.9750342062, 'RUBBRL': 0.0704586236, 'RUBRUB': 1.0, 'RUBHRK': 0.0838392593, 'RUBJPY': 1.3764588255, 'RUBTHB': 0.4001207342, 'RUBCHF': 0.0119990723, 'RUBEUR': 0.0110968948, 'RUBMYR': 0.0537122997, 'RUBBGN': 0.0217033068, 'RUBTRY': 0.1041754286, 'RUBCNY': 0.0868376402, 'RUBNOK': 0.117299726, 'RUBNZD': 0.0188647211, 'RUBZAR': 0.2009625447, 'RUBUSD': 0.0132053048, 'RUBMXN': 0.2646376365, 'RUBSGD': 0.0176773533, 'RUBAUD': 0.017935911, 'RUBILS': 0.0438749025, 'RUBKRW': 14.6283705431, 'RUBPLN': 0.0496574943, 'IDRCAD': 9.18597e-05, 'IDRHKD': 0.0005476136, 'IDRISK': 0.0095766333, 'IDRPHP': 0.0033994376, 'IDRDKK': 0.0004418432, 'IDRHUF': 0.0214438214, 'IDRCZK': 0.0015518539, 'IDRGBP': 5.29173e-05, 'IDRRON': 0.0002893948, 'IDRSEK': 0.0006030251, 'IDRIDR': 1.0, 'IDRINR': 0.0052167121, 'IDRBRL': 0.0003769738, 'IDRRUB': 0.0053502863, 'IDRHRK': 0.000448564, 'IDRJPY': 0.0073644488, 'IDRTHB': 0.0021407605, 'IDRCHF': 6.41985e-05, 'IDREUR': 5.93716e-05, 'IDRMYR': 0.0002873762, 'IDRBGN': 0.0001161189, 'IDRTRY': 0.0005573684, 'IDRCNY': 0.0004646062, 'IDRNOK': 0.0006275871, 'IDRNZD': 0.0001009317, 'IDRZAR': 0.0010752071, 'IDRUSD': 7.06522e-05, 'IDRMXN': 0.0014158871, 'IDRSGD': 9.45789e-05, 'IDRAUD': 9.59623e-05, 'IDRILS': 0.0002347433, 'IDRKRW': 0.0782659704, 'IDRPLN': 0.0002656818, 'PHPCAD': 0.0270220235, 'PHPHKD': 0.1610894738, 'PHPISK': 2.8171227972, 'PHPPHP': 1.0, 'PHPDKK': 0.1299753742, 'PHPHUF': 6.3080496708, 'PHPCZK': 0.456503135, 'PHPGBP': 0.015566481, 'PHPRON': 0.0851302024, 'PHPSEK': 0.1773896641, 'PHPIDR': 294.1663028101, 'PHPINR': 1.5345809246, 'PHPBRL': 0.1108929912, 'PHPRUB': 1.5738739368, 'PHPHRK': 0.131952425, 'PHPJPY': 2.1663726706, 'PHPTHB': 0.6297395952, 'PHPCHF': 0.0188850272, 'PHPEUR': 0.0174651134, 'PHPMYR': 0.0845363886, 'PHPBGN': 0.0341582689, 'PHPTRY': 0.1639589919, 'PHPCNY': 0.1366714987, 'PHPNOK': 0.1846149816, 'PHPNZD': 0.0296906928, 'PHPZAR': 0.3162897113, 'PHPUSD': 0.020783485, 'PHPMXN': 0.4165062787, 'PHPSGD': 0.0278219257, 'PHPAUD': 0.0282288628, 'PHPILS': 0.0690535655, 'PHPKRW': 23.0232111358, 'PHPPLN': 0.0781546361, 'KRWCAD': 0.0011736861, 'KRWHKD': 0.0069968291, 'KRWISK': 0.1223601165, 'KRWPHP': 0.0434344277, 'KRWDKK': 0.005645406, 'KRWHUF': 0.2739865275, 'KRWCZK': 0.0198279524, 'KRWGBP': 0.0006761212, 'KRWRON': 0.0036975816, 'KRWSEK': 0.0077048185, 'KRWIDR': 12.7769450176, 'KRWINR': 0.0666536443, 'KRWBRL': 0.0048165736, 'KRWRUB': 0.0683603138, 'KRWHRK': 0.0057312781, 'KRWJPY': 0.0940951572, 'KRWTHB': 0.0273523789, 'KRWCHF': 0.0008202603, 'KRWEUR': 0.0007585872, 'KRWMYR': 0.0036717897, 'KRWBGN': 0.0014836449, 'KRWTRY': 0.007121465, 'KRWCNY': 0.0059362483, 'KRWNOK': 0.0080186461, 'KRWNZD': 0.0012895983, 'KRWZAR': 0.0137378626, 'KRWUSD': 0.0009027188, 'KRWMXN': 0.0180907119, 'KRWSGD': 0.0012084294, 'KRWAUD': 0.0012261045, 'KRWILS': 0.0029993021, 'KRWKRW': 1.0, 'KRWPLN': 0.0033946019, 'INRCAD': 0.0176087315, 'INRHKD': 0.1049729416, 'INRISK': 1.8357603382, 'INRPHP': 0.6516437054, 'INRDKK': 0.0846976345, 'INRHUF': 4.1106008615, 'INRCZK': 0.2974773944, 'INRGBP': 0.0101437993, 'INRRON': 0.0554745605, 'INRSEK': 0.1155948581, 'INRIDR': 191.6916195776, 'INRINR': 1.0, 'INRBRL': 0.0722627197, 'INRRUB': 1.0256050441, 'INRHRK': 0.0859859672, 'INRJPY': 1.4117031144, 'INRTHB': 0.4103658432, 'INRCHF': 0.0123063091, 'INREUR': 0.0113810312, 'INRMYR': 0.0550876055, 'INRBGN': 0.0222590209, 'INRTRY': 0.106842845, 'INRCNY': 0.0890611218, 'INRNOK': 0.1203031907, 'INRNZD': 0.0193477531, 'INRZAR': 0.2061081995, 'INRUSD': 0.0135434272, 'INRMXN': 0.2714136948, 'INRSGD': 0.0181299828, 'INRAUD': 0.0183951608, 'INRILS': 0.0449983213, 'INRKRW': 15.0029306155, 'INRPLN': 0.0509289767, 'CHFCAD': 1.4308702488, 'CHFHKD': 8.5300101729, 'CHFISK': 149.1722926107, 'CHFPHP': 52.9520022196, 'CHFDKK': 6.8824563026, 'CHFHUF': 334.0238601683, 'CHFCZK': 24.1727550171, 'CHFGBP': 0.824276334, 'CHFRON': 4.5078146675, 'CHFSEK': 9.3931378896, 'CHFIDR': 15576.6947193193, 'CHFINR': 81.2591325257, 'CHFBRL': 5.8720059188, 'CHFRUB': 83.3397761953, 'CHFHRK': 6.9871451031, 'CHFJPY': 114.7137704615, 'CHFTHB': 33.3459724406, 'CHFCHF': 1.0, 'CHFEUR': 0.9248127254, 'CHFMYR': 4.4763710349, 'CHFBGN': 1.8087487284, 'CHFTRY': 8.6819569037, 'CHFCNY': 7.2370295015, 'CHFNOK': 9.7757329141, 'CHFNZD': 1.5721816332, 'CHFZAR': 16.7481734949, 'CHFUSD': 1.1005271433, 'CHFMXN': 22.0548413946, 'CHFSGD': 1.4732266716, 'CHFAUD': 1.4947748081, 'CHFILS': 3.6565245538, 'CHFKRW': 1219.1251271617, 'CHFPLN': 4.138444465, 'HKDCAD': 0.1677454329, 'HKDHKD': 1.0, 'HKDISK': 17.4879384182, 'HKDPHP': 6.2077302542, 'HKDDKK': 0.8068520627, 'HKDHUF': 39.1586707866, 'HKDCZK': 2.8338483222, 'HKDGBP': 0.0966325148, 'HKDRON': 0.5284653331, 'HKDSEK': 1.1011871849, 'HKDIDR': 1826.105057733, 'HKDINR': 9.5262644332, 'HKDBRL': 0.6883937768, 'HKDRUB': 9.7701848539, 'HKDHRK': 0.819125061, 'HKDJPY': 13.4482571692, 'HKDTHB': 3.9092535372, 'HKDCHF': 0.1172331544, 'HKDEUR': 0.1084187131, 'HKDMYR': 0.5247790969, 'HKDBGN': 0.212045319, 'HKDTRY': 1.0178131946, 'HKDCNY': 0.8484197973, 'HKDNOK': 1.1460400065, 'HKDNZD': 0.1843118122, 'HKDZAR': 1.96344121, 'HKDUSD': 0.1290182686, 'HKDMXN': 2.5855586274, 'HKDSGD': 0.1727110099, 'HKDAUD': 0.1752371659, 'HKDILS': 0.4286659077, 'HKDKRW': 142.9218843172, 'HKDPLN': 0.4851628991, 'EURCAD': 1.5472, 'EURHKD': 9.2235, 'EURISK': 161.3, 'EURPHP': 57.257, 'EURDKK': 7.442, 'EURHUF': 361.18, 'EURCZK': 26.138, 'EURAUD': 1.6163, 'EURRON': 4.8743, 'EURSEK': 10.1568, 'EURIDR': 16843.08, 'EURINR': 87.8655, 'EURBRL': 6.3494, 'EURRUB': 90.1153, 'EURHRK': 7.5552, 'EURJPY': 124.04, 'EURTHB': 36.057, 'EURCHF': 1.0813, 'EURSGD': 1.593, 'EURPLN': 4.4749, 'EURBGN': 1.9558, 'EURTRY': 9.3878, 'EURCNY': 7.8254, 'EURNOK': 10.5705, 'EURNZD': 1.7, 'EURZAR': 18.1098, 'EURUSD': 1.19, 'EURMXN': 23.8479, 'EURILS': 3.9538, 'EURGBP': 0.89129, 'EURKRW': 1318.24, 'EURMYR': 4.8403}

@app.route('/getProviders', methods=['GET'])
def getProviders():
    base = request.args.get('base')
    quote = request.args.get('quote')
    string = f"https://api.exchangeratesapi.io/latest?base={base}&symbols={quote}"
    x = requests.get(string)
    rates = x.json().get('rates')
    # rates = {k:v for k,v in sorted(rates.items(), key=lambda v: v[1])}
    # str2 = "https://www.freeforexapi.com/api/live?pairs="
    # for rate in rates:
    #     if base+rate in freeforexSupportedPairs:
    #         str2+=base+rate+","
    # str2=str2[:-1]
    # frates = requests.get(str2)
    # frates = frates.json().get('rates')
    response={}
    if rates[quote]:
        q = rates[quote]
    else:
        q="_"
    response["exchangerate"]=round(rates.get(quote),5)
    response["freeforex"] = abs(round(q+random.uniform(-0.5,0.5),5))
    response["fixer"] = abs(round(q+random.uniform(-0.5,0.5),5))
    # fixer = f"http://data.fixer.io/api/latest?access_key={API_KEY}&base={base}&symbols={quote}"
    # y = requests.get(fixer)
    # print(y.json())
    # for rate in rates:
    #     response[rate]=[]
    #     response[rate].append({"exchangerate":round(rates[rate],5)})
    #     response[rate].append({"freeforex":round(dictionary[base+rate]+random.uniform(-0.5,0.5),5)})
    # if frates is not None:
    #     fratesKey = frates.keys()
    #     fratesKey = [f[3:] for f in frates]
    #     for rate in fratesKey:
    #         response[rate].append({"freeforex":round(dictionary[base+rate]+random.uniform(-1,1),5)})
    #     for rate in rates:
    #         if rate not in fratesKey:
    #             response[rate].append({"freeforex":"_"})
    # else:
    #     for rate in rates:
    #         response[rate].append({"freeforex":"_"})
    #list1 = list(response.items())
    return jsonify(response)


@app.route('/exchrate', methods=['GET'])
def get_exchrate():
    string = "https://api.exchangeratesapi.io/latest"
    base = request.args.get('base')
    string+="?base="+base
    x = requests.get(string)
    rates = x.json().get('rates')
    rates = {k:v for k,v in sorted(rates.items(), key=lambda v: v[1])}
    # str2 = "https://www.freeforexapi.com/api/live?pairs="
    # for rate in rates:
    #     if base+rate in freeforexSupportedPairs:
    #         str2+=base+rate+","
    # str2=str2[:-1]
    # frates = requests.get(str2)
    # frates = frates.json().get('rates')
    response={}
    for rate in rates:
        response[rate]=[]
        response[rate].append({"exchangerate":rates[rate]})
    # if frates is not None:
    #     fratesKey = frates.keys()
    #     fratesKey = [f[3:] for f in frates]
    #     for rate in fratesKey:
    #         response[rate].append({"freeforex":frates[base+rate]["rate"]})
    #     for rate in rates:
    #         if rate not in fratesKey:
    #             response[rate].append({"freeforex":"_"})
    # else:
    #     for rate in rates:
    #         response[rate].append({"freeforex":"_"})
    list1 = list(response.items())
    return {"resp":list1}

@app.route('/history')
def historical_rates():
    st_date = request.args.get('start_date')
    en_date = request.args.get('end_date')
    start_date = datetime.fromtimestamp(int(st_date)/1000).strftime("%Y-%m-%d")
    end_date = datetime.fromtimestamp(int(en_date)/1000).strftime("%Y-%m-%d")
    base = request.args.get('selection')[0:3]
    quote= request.args.get('selection')[3:6]
    apiStr = f"https://api.exchangeratesapi.io/history?start_at={start_date}&end_at={end_date}&base={base}&symbols={quote}"
    # print(apiStr)
    x = requests.get(apiStr)
    if(x.json().get('error')):
        return {"error":"symbols not supported"}
    rates = x.json().get('rates')
    rates = {k:v for k,v in sorted(rates.items(), key=lambda v:v[0])}
    # print(rates)
    newlist=[]
    eMaxx = rMax = fMax = -1
    eMin = rMin = fMin = 99999
    eSum = rSum = fSum = 0
    count = 0
    for rate in rates:
        q = round(rates[rate][quote],5)
        r =  abs(round(q + random.uniform(-0.5,0.5),5)) 
        f = abs(round(q + random.uniform(-0.5,0.5),5))
        count = count+1
        eSum+=q
        rSum+=r
        fSum+=f
        if r>rMax:
            rMax = r
        if r<rMin:
            rMin = r
        if q<eMin:
            eMin=q
        if q>eMaxx:
            eMaxx=q
        if f<fMin:
            fMin=f
        if f>fMax:
            fMax=f
        newlist.append({"date":rate,"exchangeRateApi":q,"randomApi":r, "fixerIo":f})
    return {
        "list":newlist, 
        "eMax":eMaxx,
        "eMin":eMin, 
        "rMax":rMax, 
        "rMin":rMin,
        "fMin":fMin,
        "fMax":fMax,
        "fAvg":round(fSum/count,5),
        "eAvg":round(eSum/count,5),
        "rAvg":round(rSum/count,5)
       }

def updateRates():
    str = "https://www.freeforexapi.com/api/live?pairs="
    for rate in freeforexSupportedPairs:
        str+=rate+','
    str = str[:-1]
    # print(str)
    resp = requests.get(str)
    rates = resp.json().get('rates')
    # print("updaterates", rates)
    for rate in rates:
        dictionary[rate] = rates[rate]['rate']

@app.route('/getAll', methods=['GET'])
def getAll():
    temp = dictionary.copy()
    for item in temp:
        if temp.get(item):
            if item[0:3]!=item[3:]:
                temp[item] = round(temp[item] + random.uniform(0,1),5)
    return temp

@app.route('/getTop')
def getTop():
    temp = dictionary.copy()
    temp = {k:v for k,v in sorted(temp.items(), key=lambda v:v[1], reverse=True)}
    newtemp = list(temp)
    newlist = []
    for i in range(4):
        temp[newtemp[i]] = round(temp[newtemp[i]] + random.uniform(0,1),5)
        newlist.append({newtemp[i]:temp[newtemp[i]]})
    return jsonify(newlist)

    

@app.route('/getPair')
def getPair():
    pairs = request.args.get('pair').split(',')
    mylist = {}
    for pair in pairs:
        if pair in dictionary.keys():
            val = round(dictionary.get(pair)+random.uniform(0,1),5)
            mylist[pair]=val
        else:
            mylist[pair]="_"
    return jsonify(mylist)

@app.route('/getHistory')
def getHistory():
    pair = request.args.get('pair')
    if pair not in dictionary.keys():
        return {"error":"Invalid pair"}
    start_ms = request.args.get('start')
    end_ms = request.args.get('end')
    st_date = datetime.fromtimestamp(int(start_ms)/1000)
    en_date = datetime.fromtimestamp(int(end_ms)/1000)
    day_count = (en_date-st_date).days +1
    rate = dictionary.get(pair)
    mylist = []
    for single_date in (st_date + timedelta(n) for n in range(day_count)):
        mylist.append(
            {
                "date":strftime("%Y-%m-%d", single_date.timetuple()),
                "best_rate":round(rate+random.uniform(0,2),5),
                "worst_rate":round(rate-random.uniform(0,2),5)
            }
        )
    return jsonify(mylist)


dataset = "Foreign_Exchange_Rates.csv"
DataSet = pd.read_csv(dataset)
del DataSet['Unnamed: 0']
del DataSet['Time Serie']
DataSet = DataSet[DataSet['INDIA - INDIAN RUPEE/US$']!='ND'] 

#USDINR
USDINR = DataSet['INDIA - INDIAN RUPEE/US$']
USDINR = USDINR.values
USDINR = USDINR.astype('float32')
max_value_USDINR = USDINR.max()
min_value_USDINR = USDINR.min()

#USDEUR
USDEUR = DataSet['EURO AREA - EURO/US$']
USDEUR = USDEUR.values
USDEUR = USDEUR.astype('float32')
max_value_USDEUR = USDEUR.max()
min_value_USDEUR = USDEUR.min()

#USDGBP
USDGBP = DataSet['UNITED KINGDOM - UNITED KINGDOM POUND/US$']
USDGBP = USDGBP.values
USDGBP = USDGBP.astype('float32')
max_value_USDGBP = USDGBP.max()
min_value_USDGBP = USDGBP.min()

#USDYEN
USDYEN = DataSet['JAPAN - YEN/US$']
USDYEN = USDYEN.values
USDYEN = USDYEN.astype('float32')
max_value_USDYEN = USDYEN.max()
min_value_USDYEN = USDYEN.min()

#LSTM Model 
def prediction_model(today_USDINR,today_USDEUR,today_USDGBP,today_USDYEN):
    filename_USDINR = "USDINR_model.sav"
    filename_USDEUR = "USDEUR_model.sav"
    filename_USDGBP = "USDGBP_model.sav"
    filename_USDYEN = "USDYEN_model.sav"

    result = []

    loaded_model_USDINR = pickle.load(open(filename_USDINR,"rb")) #load the USDINR model
    tom_USDINR = loaded_model_USDINR.predict(today_USDINR)
    result_USDINR = (tom_USDINR * (max_value_USDINR - min_value_USDINR)) + min_value_USDINR

    loaded_model_USDEUR = pickle.load(open(filename_USDEUR,"rb")) #load the USDEUR model
    tom_USDEUR = loaded_model_USDEUR.predict(today_USDEUR)
    result_USDEUR = (tom_USDEUR * (max_value_USDEUR - min_value_USDEUR)) + min_value_USDEUR

    loaded_model_USDGBP = pickle.load(open(filename_USDGBP,"rb")) #load the USDGBP model
    tom_USDGBP = loaded_model_USDGBP.predict(today_USDGBP)
    result_USDGBP = (tom_USDGBP * (max_value_USDGBP - min_value_USDGBP)) + min_value_USDGBP

    loaded_model_USDYEN = pickle.load(open(filename_USDYEN,"rb")) #load the USDYEN model
    tom_USDYEN = loaded_model_USDYEN.predict(today_USDYEN)
    result_USDYEN = (tom_USDEUR * (max_value_USDYEN - min_value_USDYEN)) + min_value_USDYEN


    result.append( round(result_USDINR.tolist()[0][0],3) )
    result.append( round(result_USDEUR.tolist()[0][0],3) )
    result.append( round(result_USDGBP.tolist()[0][0],3) )
    result.append( round(result_USDYEN.tolist()[0][0],3) )
    k.clear_session()
    return result

#EndPoint is "/enter_info" which directs to prediction.html located in templates.
#After user inputs the rates,it directs to below function.

@app.route("/enter_rate",methods = ['POST','GET'])
def inputRate():
    USDINR_rate = request.args.get('USDINR')
    USDEUR_rate = request.args.get('USDEUR')
    USDGBP_rate = request.args.get('USDGBP')
    USDYEN_rate = request.args.get('USDYEN')

    
    todayRate = []
        
    today_USDINR = float(USDINR_rate)
    todayRate.append(today_USDINR)
    today_USDINR = (today_USDINR - min_value_USDINR) / (max_value_USDINR - min_value_USDINR)
    today_USDINR = np.array(today_USDINR)
    today_USDINR = today_USDINR.reshape(1,1,1)
   
    today_USDEUR = float(USDEUR_rate)
    todayRate.append(today_USDEUR)
    today_USDEUR = (today_USDEUR - min_value_USDEUR) / (max_value_USDEUR - min_value_USDEUR)
    today_USDEUR = np.array(today_USDEUR)
    today_USDEUR = today_USDEUR.reshape(1,1,1)

    today_USDGBP = float(USDGBP_rate)
    todayRate.append(today_USDGBP)
    today_USDGBP = (today_USDGBP - min_value_USDGBP) / (max_value_USDGBP - min_value_USDGBP)
    today_USDGBP = np.array(today_USDGBP)
    today_USDGBP = today_USDGBP.reshape(1,1,1)

    today_USDYEN = float(USDYEN_rate)
    todayRate.append(today_USDYEN)
    today_USDYEN = (today_USDYEN - min_value_USDYEN) / (max_value_USDYEN - min_value_USDYEN)
    today_USDYEN = np.array(today_USDYEN)
    today_USDYEN = today_USDYEN.reshape(1,1,1)

    result = prediction_model(today_USDINR,today_USDEUR,today_USDGBP,today_USDYEN)

    forex = ['USD-INR','USD-EUR','USD-GBP','USD-YEN']
    return {"result":result}

if __name__ == '__main__':
    app.run()
